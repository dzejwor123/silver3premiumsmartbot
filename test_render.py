#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Skrypt testowy dla Render - sprawdza konfiguracjƒô przed deploymentem
"""

import os
import sys
import json
import asyncio
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

def test_environment():
    """Test zmiennych ≈õrodowiskowych"""
    print("üîç Test 1: Zmienne ≈õrodowiskowe...")
    
    required_vars = ['BOT_TOKEN', 'GEMINI_API_KEY']
    optional_vars = ['ACCUWEATHER_API_KEY', 'GIPHY_API_KEY', 'ADMIN_IDS', 'OWNER_ID']
    
    # Sprawd≈∫ wymagane zmienne
    for var in required_vars:
        value = os.getenv(var)
        if not value or value.startswith('TW√ìJ_'):
            print(f"‚ùå Brak {var}")
            return False
        else:
            print(f"‚úÖ {var}: OK")
    
    # Sprawd≈∫ opcjonalne zmienne
    for var in optional_vars:
        value = os.getenv(var)
        if value and not value.startswith('TW√ìJ_'):
            print(f"‚úÖ {var}: OK")
        else:
            print(f"‚ö†Ô∏è {var}: Brak (opcjonalne)")
    
    return True

def test_port_configuration():
    """Test konfiguracji port√≥w"""
    print("\nüîç Test 2: Konfiguracja port√≥w...")
    
    port = os.getenv('PORT', '10000')
    try:
        port_int = int(port)
        print(f"‚úÖ Port: {port_int}")
        return port_int
    except ValueError:
        print(f"‚ùå Nieprawid≈Çowy port: {port}")
        return None

def test_http_server():
    """Test serwera HTTP"""
    print("\nüîç Test 3: Serwer HTTP...")
    
    port = test_port_configuration()
    if not port:
        return False
    
    try:
        # Prosty test serwera HTTP
        server = HTTPServer(('0.0.0.0', port), BaseHTTPRequestHandler)
        server.timeout = 5
        print(f"‚úÖ Serwer HTTP mo≈ºe nas≈Çuchiwaƒá na 0.0.0.0:{port}")
        server.server_close()
        return True
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd serwera HTTP: {e}")
        return False

def test_python_imports():
    """Test import√≥w Python"""
    print("\nüîç Test 4: Importy Python...")
    
    required_modules = [
        'telegram',
        'google.generativeai',
        'aiohttp',
        'httpx',
        'feedparser',
        'apscheduler',
        'pytz',
        'dotenv'
    ]
    
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}: OK")
        except ImportError as e:
            print(f"‚ùå {module}: {e}")
            return False
    
    return True

def test_bot_config():
    """Test konfiguracji bota"""
    print("\nüîç Test 5: Konfiguracja bota...")
    
    try:
        with open('bot_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        print("‚úÖ bot_config.json: OK")
        return True
    except FileNotFoundError:
        print("‚ö†Ô∏è bot_config.json: Brak (u≈ºywam zmiennych ≈õrodowiskowych)")
        return True
    except Exception as e:
        print(f"‚ùå bot_config.json: {e}")
        return False

def main():
    """G≈Ç√≥wna funkcja testowa"""
    print("üöÄ Test konfiguracji Render dla Silver3premiumsmartbot")
    print("=" * 60)
    
    tests = [
        test_environment,
        test_port_configuration,
        test_http_server,
        test_python_imports,
        test_bot_config
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd testu: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä Wyniki: {passed}/{total} test√≥w przesz≈Ço")
    
    if passed == total:
        print("‚úÖ Wszystkie testy przesz≈Çy! Bot gotowy do deploymentu.")
        return True
    else:
        print("‚ùå Niekt√≥re testy nie przesz≈Çy. Sprawd≈∫ konfiguracjƒô.")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 